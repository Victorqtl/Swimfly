generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  name          String
  password      String?
  accounts      Account[]
  boards        Board[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Board {
  id        String   @id @default(cuid())
  title     String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  color     String?
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lists     List[]
}

model List {
  id        String   @id @default(cuid())
  title     String
  order     Int
  boardId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cards     Card[]
  board     Board    @relation(fields: [boardId], references: [id], onDelete: Cascade)
}

model Card {
  id          String   @id @default(cuid())
  title       String
  description String?
  order       Int
  color       String?
  archived    Boolean  @default(false)
  listId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
}
